排他制御について
システムで操作するデータは、オンライントランザクション処理やバッチ処理からのデータ操作等で処理対象のデータが競合する場合がある。
データ操作を安全に行うためには、他の端末やバッチ処理から同一のデータが操作できないような仕組みとする必要がある。
このような仕組みを排他制御という。

排他制御の方法
排他制御の対象は、DBの各テーブルのデータであり、SQLを用いて排他制御や更新を行うものとする。
SQLでデータを検索（SELECT）して排他制御の対象としてから、更新（UPDATE）や削除（DELETE）を行う。
データ登録（INSERT）時は、番号採番など表ロックを取得しないと業務要件を満たせない場合に排他制御（悲観的排他制御）を行うこととし、原則、排他制御を行わない。
また、データ検索（SELECT）のみの場合も排他制御の対象外とする。
排他制御の方法として、楽観的排他制御と悲観的排他制御がある。

以下に、処理毎の排他制御の基本方針を示す。
１、オンライントランザクション処理は、楽観的排他制御とする。その理由は、更新するデータ量が少なくリカバリが比較的容易なため。
２、オンライン起動型バッチ処理、および、スケジュール起動型バッチ処理は、悲観的排他制御とする。その理由は、更新するデータ量が多く、リカバリが困難となる可能性が高いため。

ただ、 番号採番など、ロックを保持していないと業務要件を満たせない場合、悲観的排他制御を許可する。

楽観的排他制御について

楽観的排他制御は、データそのものに対してロックは行わずに、更新対象のデータがデータ取得時と同じ状態であることを確認してから更新することで、データの整合性を保証する方式。		
テーブル共通項目のrevisionカラムを利用して更新対象のデータがデータ取得時と同じ状態であることを判別する。
更新時に以下のようにすることで、データの整合性を保証する。		
	・データ取得時のrevisionとデータ更新時のrevisionを同じことを条件とする。（revisionが異なる場合はトランザクションをロールバックする）	
	・revisionはインクリメントする。	

悲観的排他制御
悲観的排他制御は、更新対象のデータ取得時にロックをかけることで、他のトランザクションからデータを更新されないようにする方式。
原則、行ロックを使用することとし、番号採番などデータ登録時の整合性を担保させる必要がある場合は表ロックを許可するが、表ロックは最低限に留める。
行ロックを取得する際には基本的にNOWAITで取得する。取得に失敗した場合には以下の例のように処理を繰り返す。
また処理上必要な場合にはWAITで行ロックを取得する。


ーーー

## 排他制御について

システムで操作するデータは、オンライントランザクション処理やバッチ処理により競合する可能性があります。データ操作を安全に行うためには、他の端末やバッチ処理から同一のデータが操作できないような仕組みが必要です。このような仕組みを排他制御と呼びます。

## 排他制御の方法

排他制御の対象は、データベースの各テーブルのデータです。SQLを用いて排他制御や更新を行います。データを検索（SELECT）して排他制御の対象とし、その後更新（UPDATE）や削除（DELETE）を行います。データ登録（INSERT）の際には、業務要件を満たすために番号採番などで表ロックが必要な場合にのみ排他制御（悲観的排他制御）を行い、原則として排他制御を行いません。また、データ検索（SELECT）のみの場合も排他制御の対象外とします。

排他制御の方法には、楽観的排他制御と悲観的排他制御があります。

### 処理毎の排他制御の基本方針

1. **オンライントランザクション処理**: 楽観的排他制御を採用します。理由は、更新するデータ量が少なくリカバリが比較的容易なためです。
2. **オンライン起動型バッチ処理およびスケジュール起動型バッチ処理**: 悲観的排他制御を採用します。理由は、更新するデータ量が多く、リカバリが困難となる可能性が高いためです。

ただし、番号採番などロックを保持していないと業務要件を満たせない場合は、悲観的排他制御を許可します。

## 楽観的排他制御について

楽観的排他制御は、データそのものに対してロックを行わず、更新対象のデータがデータ取得時と同じ状態であることを確認してから更新することで、データの整合性を保証する方式です。テーブルの共通項目である`revision`カラムを利用して、更新対象のデータがデータ取得時と同じ状態であることを判別します。更新時には以下のようにしてデータの整合性を保証します。
- データ取得時の`revision`とデータ更新時の`revision`が同じであることを条件とする（`revision`が異なる場合はトランザクションをロールバックする）。
- `revision`をインクリメントする。

## 悲観的排他制御について

悲観的排他制御は、更新対象のデータ取得時にロックをかけることで、他のトランザクションからデータを更新されないようにする方式です。原則として行ロックを使用し、番号採番などデータ登録時の整合性を担保する必要がある場合は表ロックを許可しますが、表ロックは最低限に留めます。行ロックを取得する際には基本的にNOWAITで取得し、取得に失敗した場合には処理を繰り返します。また、処理上必要な場合にはWAITで行ロックを取得します。
